# -*- coding: utf-8 -*-
"""Task08.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16XVIjz1pisLlPUIYBdJjWDqKPkCZc41K

**Task 08: Completing missing data**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2024-2025/master/Assignment4/course_materials"

from rdflib import Graph, Namespace, Literal, URIRef
g1 = Graph()
g2 = Graph()
g1.parse(github_storage+"/rdf/data01.rdf", format="xml")
g2.parse(github_storage+"/rdf/data02.rdf", format="xml")

"""Tarea: lista todos los elementos de la clase Person en el primer grafo (data01.rdf) y completa los campos (given name, family name y email) que puedan faltar con los datos del segundo grafo (data02.rdf). Puedes usar consultas SPARQL o iterar el grafo, o ambas cosas."""

from rdflib import Graph, Namespace, Literal, URIRef
from rdflib.namespace import RDFS, RDF, FOAF

VCARD = Namespace("http://www.w3.org/2001/vcard-rdf/3.0#")
DATA = Namespace("http://data.org#")

def get_person_data(g, person):
    given_name = g.value(person, VCARD.Given)
    family_name = g.value(person, VCARD.Family)
    email = g.value(person, VCARD.EMAIL)
    return given_name, family_name, email

def person_data(g1, g2):

    q1 = '''
    SELECT ?person
    WHERE {
        ?person a <http://data.org#Person> .
    }
    '''

    results = list(g1.query(q1))

    if not results:
        print("No Person found")

    for row in results:
        person = row.person
        given_name, family_name, email = get_person_data(g1, person)

        print(f"\nPerson: {person}")
        print(f"  Given Name: {given_name}")
        print(f"  Family Name: {family_name}")
        print(f"  Email: {email}")

        if not given_name or not family_name or not email:

            if given_name:
                g2_person = next(g2.subjects(VCARD.Given, given_name), None)
            elif family_name:
                g2_person = next(g2.subjects(VCARD.Family, family_name), None)
            elif email:
                g2_person = next(g2.subjects(VCARD.EMAIL, email), None)
            elif person:
                g2_person = next(g2.subjects(RDF.type, DATA.Person), None)
            else:
                g2_person = None

            if g2_person:
                print(f"  Found in g2: {g2_person}")
                g2_given_name, g2_family_name, g2_email = get_person_data(g2, g2_person)

                if not given_name and g2_given_name:
                    g1.add((person, VCARD.Given, g2_given_name))
                    print(f"  Updated Given Name: {g2_given_name}")

                if not family_name and g2_family_name:
                    g1.add((person, VCARD.Family, g2_family_name))
                    print(f"  Updated Family Name: {g2_family_name}")

                if not email and g2_email:
                    g1.add((person, VCARD.EMAIL, g2_email))
                    print(f"  Updated Email: {g2_email}")
            else:
                print("  No matching person found in g2")

person_data(g1, g2)