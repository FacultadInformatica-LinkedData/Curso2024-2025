# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yPniC8cCIRK0ofpUQK_h0bcNOa4CroCF

**Task 07: Querying RDF(s)**
"""

#!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2024-2025/master/Assignment4/course_materials"

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

"""**TASK 7.1: List all subclasses of "LivingThing" with RDFLib and SPARQL**"""

# TO DO
from rdflib.plugins.sparql import prepareQuery

ns = Namespace("http://somewhere#")

q1 = prepareQuery('''
  SELECT 
    ?subClass
  WHERE { 
    ?subClass rdfs:subClassOf ns:LivingThing. 
  }
  ''',
  initNs = { "ns": ns}
)

# Visualize the results

for r in g.query(q1):
  print(r.subClass)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""

# TO DO
q2 = prepareQuery('''
  SELECT 
    ?individual
  WHERE { 
    ?individual rdf:type/rdfs:subClassOf* ns:Person. 
  }
  ''',
  initNs = { "ns": ns}
)

# Visualize the results
for r in g.query(q2):
  print(r.individual)

"""**TASK 7.3: List all individuals of just "Person" or "Animal". You do not need to list the individuals of the subclasses of person (in SPARQL only)**

"""

# TO DO
q3 = prepareQuery('''
  SELECT 
    ?individual
  WHERE { 
    {
        ?individual rdf:type ns:Person .
    }
    UNION
    {
        ?individual rdf:type ns:Animal .
    } 
  }
  ''',
  initNs = { "ns": ns}
)


# Visualize the results
for r in g.query(q3):
  print(r.individual)

"""**TASK 7.4:  List the name of the persons who know Rocky (in SPARQL only)**"""

# TO DO

from rdflib import FOAF

VCARD = Namespace("http://www.w3.org/2001/vcard-rdf/3.0/")

q4 = prepareQuery('''
  SELECT 
    ?namePerson
  WHERE { 
    ?individual rdf:type/rdfs:subClassOf* ns:Person .              
    ?individual foaf:knows ns:RockySmith .
    ?individual vcard:Given ?namePerson .
  }
  ''',
  initNs = {"ns": ns, "foaf" : FOAF, "vcard" : VCARD}
)
# Visualize the results
for r in g.query(q4):
  print(r.namePerson)

"""**Task 7.5: List the name of those animals who know at least another animal in the graph (in SPARQL only)**"""

# TO DO
q5 = prepareQuery('''
  SELECT 
    ?name
  WHERE { 
    ?animal rdf:type ns:Animal. 
    ?animal foaf:knows ?other.
    ?other rdf:type ns:Animal.
    ?animal vcard:Given ?name.
  }
  ''',
  initNs = {"ns": ns, "foaf" : FOAF, "vcard" : VCARD}
)

# Visualize the results
for r in g.query(q5):
  print(r.name)


"""**Task 7.6: List the age of all living things in descending order (in SPARQL only)**"""

# TO DO
q6 = prepareQuery('''
  SELECT 
    ?age
  WHERE { 
    ?livingThings rdf:type/rdfs:subClassOf* ns:LivingThing. 
    ?livingThings foaf:age ?age
  } ORDER BY DESC(?age)
  ''',
  initNs = { "ns": ns}
)

# Visualize the results
for r in g.query(q6):
  print(r.age)