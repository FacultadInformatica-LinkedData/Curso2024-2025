# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19mwpnznReIuFzdgldi77z5oqdBYEcAcV

**Task 07: Querying RDF(s)**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2024-2025/master/Assignment4/course_materials"

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

"""**TASK 7.1: List all subclasses of "LivingThing" with RDFLib and SPARQL**"""

# TO DO
ns = Namespace("http://somewhere#")
living_thing = ns.LivingThing

# RDFLib
for subclass in g.subjects(RDFS.subClassOf, living_thing):
    print(subclass)

# SPARQL
query = '''
    PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
    PREFIX ns: <http://somewhere#>

    SELECT ?subclass WHERE {
        ?subclass rdfs:subClassOf ns:LivingThing .
    }
'''
for r in g.query(query):
    print(r.subclass)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""

person_class = ns.Person

# RDFLib
individuals = set()
for subclass in g.subjects(RDFS.subClassOf, person_class):
    individuals.update(g.subjects(RDF.type, subclass))

individuals.update(g.subjects(RDF.type, person_class))
for individual in individuals:
    print(individual)
# SPARQL
query = '''
    PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
    PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
    PREFIX ns: <http://somewhere#>

    SELECT ?individual WHERE {
        {
          ?individual rdf:type ns:Person .
        }
        UNION
        {
          ?subclass rdfs:subClassOf ns:Person .
          ?individual rdf:type ?subclass .
        }
    }
'''
for r in g.query(query):
    print(r.individual)

"""**TASK 7.3: List all individuals of just "Person" or "Animal". You do not need to list the individuals of the subclasses of person (in SPARQL only)**

"""

query = '''
    PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
    PREFIX ns: <http://somewhere#>

    SELECT ?individual WHERE {
        { ?individual rdf:type ns:Person . }
        UNION
        { ?individual rdf:type ns:Animal . }
    }
'''

# Execute the query to get individuals
for r in g.query(query):
    print(r.individual)

"""**TASK 7.4:  List the name of the persons who know Rocky (in SPARQL only)**"""

query = """
PREFIX ns: <http://somewhere#>
PREFIX vcard: <http://www.w3.org/2001/vcard-rdf/3.0/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
SELECT ?name WHERE {
    ?person rdf:type ?class .
    ?class rdfs:subClassOf* ns:Person .
    ?person foaf:knows ?friend .
    ?friend vcard:Given ?friendGiven .
    FILTER(?friendGiven = "Rocky").
    ?person vcard:FN ?name .
}
"""

for r in g.query(query):
    print(r.name)

"""**Task 7.5: List the name of those animals who know at least another animal in the graph (in SPARQL only)**"""

query = """
PREFIX ns: <http://somewhere#>
PREFIX vcard: <http://www.w3.org/2001/vcard-rdf/3.0/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT DISTINCT ?animalName WHERE {
    ?animal rdf:type ns:Animal .
    ?animal foaf:knows ?otherAnimal .
    ?otherAnimal rdf:type ns:Animal .
    ?animal vcard:FN ?animalName .
}
"""
for r in g.query(query):
    print(r.animalName)

"""**Task 7.6: List the age of all living things in descending order (in SPARQL only)**"""

query = """
PREFIX ns: <http://somewhere#>
PREFIX vcard: <http://www.w3.org/2001/vcard-rdf/3.0/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?individual ?age WHERE {
    ?individual rdf:type ?class .
    ?class rdfs:subClassOf* ns:LivingThing .
    ?individual foaf:age ?age .
}
ORDER BY DESC(?age)
"""
for r in g.query(query):
    print(f"{r.individual}, {r.age}")