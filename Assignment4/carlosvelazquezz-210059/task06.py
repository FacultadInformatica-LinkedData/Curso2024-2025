# -*- coding: utf-8 -*-
"""Task06.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ne1fR58WRiH-ZQdc0Okro2ewIdHH7Iut

**Task 06: Modifying RDF(s)**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2024-2025/master/Assignment4/course_materials"

"""Read the RDF file as shown in class"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example5.rdf", format="xml")

"""Create a new class named Researcher"""

ns = Namespace("http://somewhere#")
g.add((ns.Researcher, RDF.type, RDFS.Class))
for s, p, o in g:
  print(s,p,o)

"""**TASK 6.1: Create a new class named "University"**

"""

# Visualize the results
g.add((ns.University, RDF.type, RDFS.Class))
for s, p, o in g:
  print(s,p,o)

"""**TASK 6.2: Add "Researcher" as a subclass of "Person"**"""

# Visualize the results
g.add((ns.Researcher, RDFS.subClassOf, ns.Person))
for s, p, o in g:
  print(s,p,o)

"""**TASK 6.3: Create a new individual of Researcher named "Jane Smithers"**"""

# Visualize the results
jane_smithers = ns.JaneSmithers
g.add((jane_smithers, RDF.type, ns.Researcher)) #only info added is that there is a Researcher
for s, p, o in g:                               #all his info will be added in next task, using schema.org vocabulary
  print(s,p,o)

"""**TASK 6.4: Add to the individual JaneSmithers the email address, fullName, given and family names. Use the https://schema.org vocabulary**"""

# Visualize the results

schema = Namespace("https://schema.org/")
g.add((jane_smithers, RDF.type, schema.Person))
g.add((jane_smithers, schema.email, Literal("jane.smithers@example.com")))
g.add((jane_smithers, schema.name, Literal("Jane Smithers")))
g.add((jane_smithers, schema.givenName, Literal("Jane")))
g.add((jane_smithers, schema.familyName, Literal("Smithers")))

for s, p, o in g:
  print(s,p,o)

"""**TASK 6.5: Add UPM as the university where John Smith works. Use the "https://example.org/ namespace**"""

#I will suppose I have to do it still with the schema.org vocabulary, as in the previous task:
g.add((ns.University, RDFS.subClassOf, schema.Organization))
example = Namespace("https://example.org/")
upm = example.UPM
g.add((upm, RDF.type, ns.University))
john_smith = ns.JohnSmith  # John Smith ya est√° declarado en el grafo
g.add((john_smith, schema.worksFor, upm))
for s, p, o in g:
    print(s, p, o)

#This was not asked, but it would be a good idea to make University a subclass
#of Organization That way the relation worksFor would make more sense.
#This is why I added that info to the graph

"""**Task 6.6: Add that Jown knows Jane using the FOAF vocabulary. Make sure the relationship exists.**"""

foaf = Namespace("http://xmlns.com/foaf/0.1/")
g.add((ns.JohnSmith, foaf.knows, ns.JaneSmithers))

for s, p, o in g:
    print(s, p, o)
