# -*- coding: utf-8 -*-
"""Task09.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GliSzYTj_vnjcVKWkzsaWT-u_5thHIaK

**Task 09: Data linking**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2024-2025/master/Assignment4/course_materials/"

from rdflib import Graph, Namespace, Literal, URIRef
g1 = Graph()
g2 = Graph()
g3 = Graph()
g1.parse(github_storage+"rdf/data03.rdf", format="xml")
g2.parse(github_storage+"rdf/data04.rdf", format="xml")

"""Busca individuos en los dos grafos y enlázalos mediante la propiedad OWL:sameAs, inserta estas coincidencias en g3. Consideramos dos individuos iguales si tienen el mismo apodo y nombre de familia. Ten en cuenta que las URI no tienen por qué ser iguales para un mismo individuo en los dos grafos."""

from rdflib.namespace import RDF, OWL
VCARD = Namespace("http://www.w3.org/2001/vcard-rdf/3.0#")

#list for the elements from g1 and g2. We will save data as ((Given, Family), URI)
#as the only way of knowing two persons are the same is if both Given and Family
#are equal. So, that tuple will be the key of both lists

individuos_g1 = {}
individuos_g2 = {}

#we define the function so we don't have to double the code
def iterate_graph(graph, list):
    for person in graph.subjects(RDF.type, None):  # No asumimos que RDF:type sea de un namespace específico
        given_name = None
        family_name = None

        for given in graph.objects(person, VCARD.Given):
            given_name = str(given)
        for family in graph.objects(person, VCARD.Family):
            family_name = str(family)

        if given_name and family_name:
            list[(given_name, family_name)] = person

iterate_graph(g1, individuos_g1)
iterate_graph(g2, individuos_g2)

#we check if there is same persons
for key_g1, uri_g1 in individuos_g1.items():
    if key_g1 in individuos_g2:
        uri_g2 = individuos_g2[key_g1]
        g3.add((uri_g1, OWL.sameAs, uri_g2)) #we link the data in the graph g3


#the result is in g3, we print the linked data:
for s, p, o in g3:
    print(s, p, o)