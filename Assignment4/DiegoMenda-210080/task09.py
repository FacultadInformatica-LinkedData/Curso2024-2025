# -*- coding: utf-8 -*-
"""Task09.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WY3giCXudT6Uz0NMBDPVvQFgt2nDJj8X

**Task 09: Data linking**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2024-2025/master/Assignment4/course_materials/"

from rdflib import Graph, Namespace, Literal, URIRef
g1 = Graph()
g2 = Graph()
g3 = Graph()
g1.parse(github_storage+"rdf/data03.rdf", format="xml")
g2.parse(github_storage+"rdf/data04.rdf", format="xml")

"""Busca individuos en los dos grafos y enlázalos mediante la propiedad OWL:sameAs, inserta estas coincidencias en g3. Consideramos dos individuos iguales si tienen el mismo apodo y nombre de familia. Ten en cuenta que las URI no tienen por qué ser iguales para un mismo individuo en los dos grafos."""

#Vemos el aspecto de los grafos.
print("############ GRAFO 1 ###########")
for s, p, o in g1:
  print(s,p,o)
print("############ GRAFO 2 ###########")
for s, p, o in g2:
  print(s,p,o)

from rdflib import Graph, Namespace, Literal, URIRef, RDF

DATA3 = Namespace("http://data.three.org#")
DATA4 = Namespace("http://data.four.org#")
VCARD = Namespace("http://www.w3.org/2001/vcard-rdf/3.0#")
OWL = Namespace("http://www.w3.org/2002/07/owl#")


def get_people_attributes(graph):
    people = {}
    for person in graph.subjects(RDF.type, DATA3.Person) | graph.subjects(RDF.type, DATA4.Person):
        given_name = None
        family_name = None

        # Obtener Given Name
        for _, _, given in graph.triples((person, VCARD.Given, None)):
            given_name = given

        # Obtener Family Name
        for _, _, family in graph.triples((person, VCARD.Family, None)):
            family_name = family

        # Almacenar la información en un diccionario
        if given_name and family_name:
            people[(given_name, family_name)] = person

    return people

# Obtener las personas y sus atributos de los dos grafos
people_g3 = get_people_attributes(g1)
people_g4 = get_people_attributes(g2)

# Comparar y añadir OWL:sameAs en g3
for (given1, family1), person1 in people_g3.items():
    for (given2, family2), person2 in people_g4.items():
        if given1 == given2 and family1 == family2:
            # Si encontramos una coincidencia, añadimos a g3
            g3.add((person1, OWL.sameAs, person2))
            print(f"Enlazando {person1} y {person2} como OWL:sameAs.")