# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15JR-Vr7zmyqJCiaz0Ki1y03rvXV4AwFv

**Task 07: Querying RDF(s)**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2024-2025/master/Assignment4/course_materials"

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

"""**TASK 7.1: List all subclasses of "LivingThing" with RDFLib and SPARQL**"""

# TO DO

query = """
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX ns: <http://somewhere#>
SELECT ?subclass
WHERE {
    ?subclass rdfs:subClassOf ns:LivingThing .
}
"""


results = g.query(query)

# Visualize the results
print("Subclases de LivingThing:")
for row in results:
    print(row.subclass)
#for r in g.query(q1):
#  print(r)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""

# TO DO
query =  """
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX ns: <http://somewhere#>
SELECT ?p
WHERE {
    {
        ?p a ns:Person .
    }
    UNION
    {
        ?p a ?subclass .
        ?subclass rdfs:subClassOf ns:Person .
    }
}
"""
results = g.query(query)
# Visualize the results
for row in results:
    print(row.p)

"""**TASK 7.3: List all individuals of just "Person" or "Animal". You do not need to list the individuals of the subclasses of person (in SPARQL only)**

"""

# TO DO
query =  """
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX ns: <http://somewhere#>
SELECT ?s
WHERE {
    {
        ?s a ns:Person .
    }
    UNION
    {
        ?s a ns:Animal .
    }
}
"""
# Visualize the results

results = g.query(query)
for row in results:
    print(row.s)

"""**TASK 7.4:  List the name of the persons who know Rocky (in SPARQL only)**"""

# TO DO
query =  """
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX ns: <http://somewhere#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX vcard: <http://www.w3.org/2001/vcard-rdf/3.0/>
SELECT ?name
WHERE {

        ?p a ns:Person .
        ?p foaf:knows ns:RockySmith .
        ?p vcard:Given ?name .

}
"""
# Visualize the results
results = g.query(query)
for row in results:
    print(row.name)

"""**Task 7.5: List the name of those animals who know at least another animal in the graph (in SPARQL only)**"""

# TO DO
query =  """
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX ns: <http://somewhere#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX vcard: <http://www.w3.org/2001/vcard-rdf/3.0/>
SELECT ?name
WHERE {

        ?a a ns:Animal .
        ?a foaf:knows ?aa .
        ?aa a ns:Animal .
        ?a vcard:Given ?name

}
"""
# Visualize the results
results = g.query(query)
for row in results:
    print(row.name)

"""**Task 7.6: List the age of all living things in descending order (in SPARQL only)**"""

# TO DO
query =  """
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX ns: <http://somewhere#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?livingThing ?age
WHERE {
    {
        ?livingThing a ?subclass .
        ?subclass rdfs:subClassOf* ns:LivingThing .
    }
    ?livingThing foaf:age ?age .
}
ORDER BY DESC(?age)
"""

# Ejecutar la consulta SPARQL
results = g.query(query)

# Visualizar los resultados
for row in results:
    print(row.age)