# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dfiD9pjUO021sxSZ3GO1xWrHD61QL3IK

**Task 07: Querying RDF(s)**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2024-2025/master/Assignment4/course_materials"

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

"""**TASK 7.1: List all subclasses of "LivingThing" with RDFLib and SPARQL**"""

# Define the namespace
ns = Namespace("http://somewhere#")

# Consulta SPARQL para listar subclases de LivingThing
query_subclasses = """
    SELECT ?subclass WHERE {
        ?subclass rdfs:subClassOf ns:LivingThing .
    }
"""

# Ejecutar la consulta SPARQL
results = g.query(query_subclasses, initNs={'rdfs': RDFS, 'ns': ns})

# Mostrar los resultados
for row in results:
    print(f"Subclass: {row.subclass}")

"""

```
# Tiene formato de c√≥digo
```

**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**
"""

# Consulta SPARQL para listar individuos de "Person" y sus subclases
query_individuals = """
    SELECT ?individual WHERE {
        ?individual rdf:type ?class .
        ?class rdfs:subClassOf* ns:Person .  # Include subclasses
    }
"""

# Ejecutar la consulta SPARQL
results = g.query(query_individuals, initNs={'rdf': RDF, 'rdfs': RDFS, 'ns': ns})

# Mostrar los resultados
for row in results:
    print(f"Individual: {row.individual}")

"""**TASK 7.3: List all individuals of just "Person" or "Animal". You do not need to list the individuals of the subclasses of person (in SPARQL only)**

"""

# TO DO
# Visualize the results
q3 = """
SELECT ?individual WHERE {
  { ?individual rdf:type ns:Person } UNION
  { ?individual rdf:type ns:Animal }
}
"""

for r in g.query(q3):
  print(r)

"""**TASK 7.4:  List the name of the persons who know

---

Rocky (in SPARQL only)**
"""

q4 = """
SELECT ?personName WHERE {
  ?person rdf:type ns:Person .
  ?person vcard:knows ns:Rocky .
  ?person vcard:FN ?personName .
}
"""

for r in g.query(q4):
  print(f"Person: {r['personName']}")

"""**Task 7.5: List the name of those animals who know at least another animal in the graph (in SPARQL only)**"""

q5 = """
SELECT ?animalName WHERE {
  ?animal rdf:type ns:Animal .
  ?animal vcard:knows ?otherAnimal .
  ?otherAnimal rdf:type ns:Animal .
  ?animal vcard:FN ?animalName .
}
"""

for r in g.query(q5):
  print(f"Animal: {r['animalName']}")

"""**Task 7.6: List the age of all living things in descending order (in SPARQL only)**"""

q6 = """
SELECT ?livingThing ?age WHERE {
  ?livingThing rdf:type ?class .
  ?class rdfs:subClassOf* ns:LivingThing .
  ?livingThing ns:age ?age .
}
ORDER BY DESC(?age)
"""
for r in g.query(q6):
  print(r)