# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yPniC8cCIRK0ofpUQK_h0bcNOa4CroCF

**Task 07: Querying RDF(s)**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2024-2025/master/Assignment4/course_materials"

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

"""**TASK 7.1: List all subclasses of "LivingThing" with RDFLib and SPARQL**"""

# TO DO
query = """
    SELECT ?subclass WHERE {
        ?subclass rdfs:subClassOf <http://somewhere#LivingThing> .
    }
"""
# Visualize the results
results = g.query(query)
for row in results:
    print(row.subclass)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""

# TO DO
query = """
    SELECT ?individual WHERE {
        ?individual a ?personClass .
        ?personClass rdfs:subClassOf* <http://somewhere#Person> .
    }
"""
results = g.query(query)
# Visualize the results

for row in results:
    print(row.individual)
"""**TASK 7.3: List all individuals of just "Person" or "Animal". You do not need to list the individuals of the subclasses of person (in SPARQL only)**

"""

# TO DO

query = """
    SELECT ?individual WHERE {
        { ?individual a <http://somewhere#Person> }
        UNION
        { ?individual a <http://somewhere#Animal> }
    }
"""
results = g.query(query)

# Visualize the results
for row in results:
    print(row.individual)
"""**TASK 7.4:  List the name of the persons who know Rocky (in SPARQL only)**"""

# TO DO
query = """
    SELECT ?name WHERE {
        ?person foaf:knows <http://somewhere#Rocky> .
        ?person foaf:name ?name .
    }
"""
results = g.query(query)
# Visualize the results
for row in results:
    print(row.name)

"""**Task 7.5: List the name of those animals who know at least another animal in the graph (in SPARQL only)**"""

# TO DO
query = """
    SELECT DISTINCT ?animalName WHERE {
        ?animal foaf:knows ?otherAnimal .
        ?animal a <http://somewhere#Animal> .
        ?otherAnimal a <http://somewhere#Animal> .
        ?animal foaf:name ?animalName .
    }
"""

results = g.query(query)
# Visualize the results
for row in results:
    print(row.animalName)
"""**Task 7.6: List the age of all living things in descending order (in SPARQL only)**"""

# TO DO
query = """
    SELECT ?livingThing ?age WHERE {
        ?livingThing a <http://somewhere#LivingThing> .
        ?livingThing <http://schema.org/age> ?age .
    }
    ORDER BY DESC(?age)
"""

results = g.query(query)

# Visualize the results

for row in results:
    print(row.age)
