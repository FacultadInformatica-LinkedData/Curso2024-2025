# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yPniC8cCIRK0ofpUQK_h0bcNOa4CroCF

**Task 07: Querying RDF(s)**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2024-2025/master/Assignment4/course_materials"

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0/"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

"""**TASK 7.1: List all subclasses of "LivingThing" with RDFLib and SPARQL**"""

# TO DO
ns = Namespace("http://somewhere#")
# RDFLib
print("RDFLib - TASK 7.1: List all subclasses of \"LivingThing\" with RDFLib and SPARQL")
for s, p, o in g.triples((None, RDFS.subClassOf, ns.LivingThing)):
    print(s)

# SPARQL
q1 = """
    SELECT ?subClass
    WHERE {
        ?subClass rdfs:subClassOf ns:LivingThing .
    }
"""
print("\nSPARQL - TASK 7.1: List all subclasses of \"LivingThing\" with RDFLib and SPARQL")
for r in g.query(q1, initNs={"ns": ns}):
    print(r.subClass)


"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""

# TO DO
# RDFLib
print("\nRDF - TASK 7.2: List all individuals of \"Person\" with RDFLib and SPARQL (remember the subClasses)")
for subclass in g.triples((None, RDFS.subClassOf, ns.Person)):
    for individual in g.triples((None, RDF.type, subclass[0])):
        print(individual[0])
for individual in g.triples((None, RDF.type, ns.Person)):
    print(individual[0])


# SPARQL
q2 = """
    SELECT ?individual
    WHERE {
        ?individual rdf:type/rdfs:subClassOf* ns:Person .
    }
"""
print("\nSPARQL - TASK 7.2: List all individuals of \"Person\" with RDFLib and SPARQL (remember the subClasses):")
for r in g.query(q2, initNs={"ns": ns, "rdf": RDF, "rdfs": RDFS}):
    print(r.individual)

"""**TASK 7.3: List all individuals of just "Person" or "Animal". You do not need to list the individuals of the subclasses of person (in SPARQL only)**

"""

# TO DO
q3 = """
    SELECT ?individual
    WHERE {
        { ?individual rdf:type ns:Person } UNION { ?individual rdf:type ns:Animal }
    }
"""
print("\nTASK 7.3: List all individuals of just \"Person\" or \"Animal\". You do not need to list the individuals of the subclasses of person (in SPARQL only):")
for r in g.query(q3, initNs={"ns": ns, "rdf": RDF}):
    print(r.individual)


"""**TASK 7.4:  List the name of the persons who know Rocky (in SPARQL only)**"""

# TO DO
q4 = """

    SELECT ?name
    WHERE {
        ?person a ns:Person . 
        ?person foaf:knows ns:RockySmith .
        ?person vcard:Given ?name .
    }
"""
from rdflib import FOAF
print("\nTASK 7.4:  List the name of the persons who know Rocky (in SPARQL only)")
for r in g.query(q4):
    print(r.name)


"""**Task 7.5: List the name of those animals who know at least another animal in the graph (in SPARQL only)**"""

# TO DO
q5 = """
    SELECT ?name
    WHERE {
        ?animal a ns:Animal .
        ?otherAnimal a ns:Animal .
        ?animal foaf:knows ?otherAnimal .
        ?animal vcard:Given ?name .
    }
"""
VCARD = Namespace("http://www.w3.org/2001/vcard-rdf/3.0#")
print("\nTask 7.5: List the name of those animals who know at least another animal in the graph (in SPARQL only)")
for r in g.query(q5):
    print(r.name)

"""**Task 7.6: List the age of all living things in descending order (in SPARQL only)**"""

# TO DO
q6 = """
    SELECT ?livingThing ?age
    WHERE {
        ?livingThing a ?subclass .
        ?subclass rdfs:subClassOf* ns:LivingThing .
        ?livingThing foaf:age ?age .
    }
    ORDER BY DESC(?age)
"""

print("\nTask 7.6: List the age of all living things in descending order (in SPARQL only)")
for r in g.query(q6):
    print(r.age)