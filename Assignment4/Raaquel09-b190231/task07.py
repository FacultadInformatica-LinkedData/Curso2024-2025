# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hzCxRzLLr7tRG1Ql9Qf7xnYVL3-ewL0I

**Task 07: Querying RDF(s)**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2024-2025/master/Assignment4/course_materials"

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

"""**TASK 7.1: List all subclasses of "LivingThing" with RDFLib and SPARQL**"""

from rdflib.plugins.sparql import prepareQuery
from rdflib import FOAF

ns = Namespace("http://somewhere#")
VCARD = Namespace("http://www.w3.org/2001/vcard-rdf/3.0#")

q1 = prepareQuery('''
  PREFIX ns: <http://somewhere#>
  PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
  PREFIX foaf: <http://xmlns.com/foaf/0.1/>
  PREFIX vcard: <http://www.w3.org/2001/vcard-rdf/3.0/>

  SELECT ?subclass WHERE {
  ?subclass rdfs:subClassOf <http://somewhere#LivingThing> .
}
  ''',
  initNs = {"ns": ns, "foaf" : FOAF, "vcard" : VCARD}
)

# Visualize the results

for r in g.query(q1):
  print(r)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""

q2 = prepareQuery('''
  PREFIX ns: <http://somewhere#>
  PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
  PREFIX foaf: <http://xmlns.com/foaf/0.1/>
  PREFIX vcard: <http://www.w3.org/2001/vcard-rdf/3.0/>


SELECT ?individuals WHERE {
  {
    ?individuals a ns:Person
  } UNION {
    ?subclass rdfs:subClassOf ns:Person .
    ?individuals a ?subclass .
  }
}
  ''',
  initNs = {"ns": ns, "foaf" : FOAF, "vcard" : VCARD}
)

# Visualize the results

for r in g.query(q2):
  print(r)

"""**TASK 7.3: List all individuals of just "Person" or "Animal". You do not need to list the individuals of the subclasses of person (in SPARQL only)**

"""

q3 = prepareQuery('''
  PREFIX ns: <http://somewhere#>
  PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
  PREFIX foaf: <http://xmlns.com/foaf/0.1/>
  PREFIX vcard: <http://www.w3.org/2001/vcard-rdf/3.0/>

SELECT ?individuals WHERE {
  { ?individuals a ns:Person }
  UNION
  { ?individuals a ns:Animal }
}
  ''',
  initNs = {"ns": ns, "foaf" : FOAF, "vcard" : VCARD}
)

# Visualize the results

for r in g.query(q3):
  print(r)

"""**TASK 7.4:  List the name of the persons who know Rocky (in SPARQL only)**"""

q4 = prepareQuery('''
  PREFIX ns: <http://somewhere#>
  PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
  PREFIX foaf: <http://xmlns.com/foaf/0.1/>
  PREFIX vcard: <http://www.w3.org/2001/vcard-rdf/3.0/>

SELECT ?name WHERE {
  ?person a ns:Person .
  ?person foaf:knows ns:RockySmith .
  ?person vcard:FN ?name .
}
  ''',
  initNs = {"ns": ns, "foaf" : FOAF, "vcard" : VCARD}
)

# Visualize the results

for r in g.query(q4):
  print(r)

"""**Task 7.5: List the name of those animals who know at least another animal in the graph (in SPARQL only)**"""

q5 = prepareQuery('''
  PREFIX ns: <http://somewhere#>
  PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
  PREFIX foaf: <http://xmlns.com/foaf/0.1/>
  PREFIX vcard: <http://www.w3.org/2001/vcard-rdf/3.0/>

SELECT ?animalName WHERE {
  ?animal a ns:Animal .
  ?animal foaf:knows ?otherAnimal .
  ?otherAnimal a ns:Animal .
  ?animal vcard:Given ?animalName .
}
  ''',
  initNs = {"ns": ns, "foaf" : FOAF, "vcard" : VCARD}
)

# Visualize the results

for r in g.query(q5):
  print(r)

"""**Task 7.6: List the age of all living things in descending order (in SPARQL only)**"""

q6 = prepareQuery('''
  PREFIX ns: <http://somewhere#>
  PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
  PREFIX foaf: <http://xmlns.com/foaf/0.1/>
  PREFIX vcard: <http://www.w3.org/2001/vcard-rdf/3.0/>

SELECT ?livingThings ?age WHERE {
  {
        ?livingThing a ?subclass .
        ?subclass rdfs:subClassOf* ns:LivingThing .
    }
    ?livingThing foaf:age ?age .
    FILTER(?age > 0)
}
ORDER BY DESC(?age)
  ''',
  initNs = {"ns": ns, "foaf" : FOAF, "vcard" : VCARD}
)

# Visualize the results

for r in g.query(q6):
  print(r)