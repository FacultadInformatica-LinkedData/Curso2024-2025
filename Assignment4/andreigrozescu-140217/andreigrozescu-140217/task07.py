# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dHEHWl7T0lAC-LTnytd4TzCfvFba97yb

**Task 07: Querying RDF(s)**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2024-2025/master/Assignment4/course_materials"

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

"""**TASK 7.1: List all subclasses of "LivingThing" with RDFLib and SPARQL**"""

q1 = """
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT ?subclass
WHERE {
  ?subclass rdfs:subClassOf <http://somewhere#LivingThing> .
}
"""
# Visualize the results

print("Subclasses of LivingThing:")
for r in g.query(q1):
    print(r)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""

q2 = """
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
SELECT ?individual
WHERE {
  ?individual rdf:type <http://somewhere#Person> .
}
"""
print("\nIndividuals of Person:")
for r in g.query(q2):
    print(r)

"""**TASK 7.3: List all individuals of just "Person" or "Animal". You do not need to list the individuals of the subclasses of person (in SPARQL only)**

"""

q3 = """
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
SELECT ?individual
WHERE {
  {
    ?individual rdf:type <http://somewhere#Person> .
    FILTER NOT EXISTS {
      ?individual rdf:type ?subclass .
      ?subclass rdfs:subClassOf <http://somewhere#Person> .
    }
  }
  UNION
  {
    ?individual rdf:type <http://somewhere#Animal> .
  }
}
"""
print("\nIndividuals of just Person or Animal:")
for r in g.query(q3):
    print(r)

"""**TASK 7.4:  List the name of the persons who know Rocky (in SPARQL only)**"""

q4 = """
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
SELECT ?name
WHERE {
  ?person foaf:knows <http://somewhere#Rocky> .
  ?person <http://www.w3.org/2001/vcard-rdf/3.0/FN> ?name .
}
"""
print("\nList the name of the persons who know Rocky:")
for r in g.query(q4):
    print(r)

"""**Task 7.5: List the name of those animals who know at least another animal in the graph (in SPARQL only)**"""

q5 = """
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
SELECT ?animal
WHERE {
  ?animal rdf:type <http://somewhere#Animal> .
  ?animal foaf:knows ?anotherAnimal .
  ?anotherAnimal rdf:type <http://somewhere#Animal> .
  FILTER(?animal != ?anotherAnimal)  # Ensure it's a different animal
}
"""
print("\nAnimals who know at least another animal:")
for r in g.query(q5):
    print(r)

"""**Task 7.6: List the age of all living things in descending order (in SPARQL only)**"""

q6 = """
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
SELECT ?livingThing ?age
WHERE {
  ?livingThing rdf:type <http://somewhere#LivingThing> .
  ?livingThing <http://somewhere#age> ?age .
}
ORDER BY DESC(?age)
"""
print("\nAge of all living things in descending order:")
for r in g.query(q6):
    print(r)