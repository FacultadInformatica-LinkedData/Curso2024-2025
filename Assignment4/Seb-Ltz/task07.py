# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tNIEYYfkeEZ6ywZkuFJTTUt9B-4AkC7S

**Task 07: Querying RDF(s)**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2024-2025/master/Assignment4/course_materials"

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

"""**TASK 7.1: List all subclasses of "LivingThing" with RDFLib and SPARQL**"""

ns = Namespace("http://somewhere#")

# Using RDFLib
def get_subclasses(cls, graph):
    subclasses = set()
    for subclass in graph.subjects(RDFS.subClassOf, cls):
        subclasses.add(subclass)
        subclasses.update(get_subclasses(subclass, graph))
    return subclasses

subclasses = get_subclasses(ns.LivingThing, g)
print("Subclasses of LivingThing (RDFLib):")
for sc in subclasses:
    print(sc)


# Using SPARQL
q1 = """
PREFIX ns: <http://somewhere#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?subclass WHERE {
    ?subclass rdfs:subClassOf+ ns:LivingThing .
}
"""
print("Subclasses of LivingThing (SPARQL):")

for row in g.query(q1):
    print(row.subclass)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""

# Using RDFLib
subclasses = get_subclasses(ns.Person, g)
subclasses.add(ns.Person)

individuals = set()
for cls in subclasses:
    for ind in g.subjects(RDF.type, cls):
        individuals.add(ind)

print("Individuals of Person (RDFLib):")
for ind in individuals:
    print(ind)

# Using SPARQL
q2 = """
PREFIX ns: <http://somewhere#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?individual WHERE {
    ?individual rdf:type ?class .
    ?class rdfs:subClassOf* ns:Person .
}
"""
print("Individuals of Person (SPARQL):")
for row in g.query(q2):
    print(row.individual)

"""**TASK 7.3: List all individuals of just "Person" or "Animal". You do not need to list the individuals of the subclasses of person (in SPARQL only)**

"""

q3 = """
PREFIX ns: <http://somewhere#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?individual WHERE {
    ?individual rdf:type ?type .
    FILTER (?type = ns:Person || ?type = ns:Animal)
}
"""
print("Individuals of Person or Animal (SPARQL):")

# Visualize the results
for row in g.query(q3):
    print(row.individual)

"""**TASK 7.4:  List the name of the persons who know Rocky (in SPARQL only)**"""

q4 = """
PREFIX ns: <http://somewhere#>
PREFIX vcard: <http://www.w3.org/2001/vcard-rdf/3.0/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?name WHERE {
    ?person rdf:type ?class .
    ?class rdfs:subClassOf* ns:Person .
    ?person foaf:knows ?friend .
    ?friend vcard:Given ?friendGiven .
    FILTER(?friendGiven = "Rocky").
    ?person vcard:FN ?name .
}
"""

# Visualize the results
print("Names of persons who know Rocky (SPARQL):")
for row in g.query(q4):
    print(row.name)

"""**Task 7.5: List the name of those animals who know at least another animal in the graph (in SPARQL only)**"""

q5 = """
PREFIX ns: <http://somewhere#>
PREFIX vcard: <http://www.w3.org/2001/vcard-rdf/3.0/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT DISTINCT ?animal ?animalName WHERE {
    ?animal rdf:type ns:Animal .
    ?animal foaf:knows ?otherAnimal .
    ?otherAnimal rdf:type ?otherAnimalType .
    FILTER(?otherAnimalType = ns:Animal) .
    Optional { ?animal vcard:FN ?animalName . }
}
"""
# Visualize the results
print("Names of animals who know at least another animal (SPARQL):")
for row in g.query(q5):
  print(row.animalName if row.animalName else "[None name found]", row.animal)

"""**Task 7.6: List the age of all living things in descending order (in SPARQL only)**"""

q6 = """
PREFIX ns: <http://somewhere#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?livingThing ?age WHERE {
    ?livingThing rdf:type ?class .
    ?class rdfs:subClassOf* ns:LivingThing .
    ?livingThing foaf:age ?age .
} ORDER BY DESC(?age)
"""
# Visualize the results
print("Age of all living things in descending order (SPARQL):")
for row in g.query(q6):
    print(f"{row.livingThing}: {row.age}")

